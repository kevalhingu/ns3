/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/applications-module.h"
#include "ns3/core-module.h"
#include "ns3/internet-module.h"
#include "ns3/network-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/netanim-module.h"

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("FirstScriptExample");

int
main(int argc, char* argv[])
{
    //CommandLine cmd(FILE);
    //cmd.Parse(argc, argv);

    Time::SetResolution(Time::NS);
    LogComponentEnable("UdpEchoClientApplication", LOG_LEVEL_INFO);
    LogComponentEnable("UdpEchoServerApplication", LOG_LEVEL_INFO);

    NodeContainer nodes;
    nodes.Create(7);

    PointToPointHelper p2p1;
    p2p1.SetDeviceAttribute("DataRate", StringValue("5Mbps"));
    p2p1.SetChannelAttribute("Delay", StringValue("2ms"));

    NetDeviceContainer devices1, devices2, devices3, devices4, devices5, devices6;
    devices1 = p2p1.Install(nodes.Get(0), nodes.Get(1));
    devices2 = p2p1.Install(nodes.Get(0), nodes.Get(2));
    devices3 = p2p1.Install(nodes.Get(1), nodes.Get(3));
    devices4 = p2p1.Install(nodes.Get(1), nodes.Get(4));
    devices5 = p2p1.Install(nodes.Get(2), nodes.Get(5));
    devices6 = p2p1.Install(nodes.Get(2), nodes.Get(6));

    InternetStackHelper stack;
    stack.Install(nodes);

    Ipv4AddressHelper address;
    address.SetBase("17.1.1.0", "255.255.255.0");

    Ipv4InterfaceContainer interfaces1 = address.Assign(devices1);
    
    address.SetBase("17.1.2.0", "255.255.255.0");
    
    Ipv4InterfaceContainer interfaces2 = address.Assign(devices2);
    
    address.SetBase("17.1.3.0", "255.255.255.0");
    
    Ipv4InterfaceContainer interfaces3 = address.Assign(devices3);
    
    address.SetBase("17.1.4.0", "255.255.255.0");
    
    Ipv4InterfaceContainer interfaces4 = address.Assign(devices4);
    
    address.SetBase("17.1.5.0", "255.255.255.0");
    
    Ipv4InterfaceContainer interfaces5 = address.Assign(devices5);
    
    address.SetBase("17.1.6.0", "255.255.255.0");
    
    Ipv4InterfaceContainer interfaces6 = address.Assign(devices6);

    UdpEchoServerHelper echoServer(9);

    ApplicationContainer serverApps = echoServer.Install(nodes.Get(5));
    serverApps.Start(Seconds(1.0));
    serverApps.Stop(Seconds(10.0));

    UdpEchoClientHelper echoClient(interfaces5.GetAddress(1), 9);
    echoClient.SetAttribute("MaxPackets", UintegerValue(1));
    echoClient.SetAttribute("Interval", TimeValue(Seconds(1.0)));
    echoClient.SetAttribute("PacketSize", UintegerValue(1024));
    
    Ipv4GlobalRoutingHelper::PopulateRoutingTables();

    ApplicationContainer clientApps = echoClient.Install(nodes.Get(3));
    clientApps.Start(Seconds(2.0));
    clientApps.Stop(Seconds(10.0));
    
    p2p1.EnablePcapAll("21ce017");
    
    AnimationInterface anim("21ce017.xml");
    
    anim.SetConstantPosition(nodes.Get(0), 40.0, 10.0);
    anim.SetConstantPosition(nodes.Get(1), 20.0, 30.0);
    anim.SetConstantPosition(nodes.Get(2), 60.0, 30.0);
    anim.SetConstantPosition(nodes.Get(3), 10.0, 50.0);
    anim.SetConstantPosition(nodes.Get(4), 30.0, 50.0);
    anim.SetConstantPosition(nodes.Get(5), 50.0, 50.0);
    anim.SetConstantPosition(nodes.Get(6), 70.0, 50.0);

    Simulator::Run();
    Simulator::Destroy();
    return 0;
}